/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RegisterImport } from './routes/register'
import { Route as MobileRecordImport } from './routes/mobile-record'
import { Route as LoginImport } from './routes/login'
import { Route as AccueilImport } from './routes/accueil'
import { Route as protectedImport } from './routes/__protected'
import { Route as protectedIndexImport } from './routes/__protected/index'
import { Route as protectedTemplatesImport } from './routes/__protected/templates'
import { Route as protectedPatientsImport } from './routes/__protected/patients'
import { Route as protectedIntegrationsImport } from './routes/__protected/integrations'
import { Route as protectedDocumentsImport } from './routes/__protected/documents'
import { Route as protectedContactsImport } from './routes/__protected/contacts'

// Create/Update Routes

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const MobileRecordRoute = MobileRecordImport.update({
  id: '/mobile-record',
  path: '/mobile-record',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AccueilRoute = AccueilImport.update({
  id: '/accueil',
  path: '/accueil',
  getParentRoute: () => rootRoute,
} as any)

const protectedRoute = protectedImport.update({
  id: '/__protected',
  getParentRoute: () => rootRoute,
} as any)

const protectedIndexRoute = protectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedRoute,
} as any)

const protectedTemplatesRoute = protectedTemplatesImport.update({
  id: '/templates',
  path: '/templates',
  getParentRoute: () => protectedRoute,
} as any)

const protectedPatientsRoute = protectedPatientsImport.update({
  id: '/patients',
  path: '/patients',
  getParentRoute: () => protectedRoute,
} as any)

const protectedIntegrationsRoute = protectedIntegrationsImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => protectedRoute,
} as any)

const protectedDocumentsRoute = protectedDocumentsImport.update({
  id: '/documents',
  path: '/documents',
  getParentRoute: () => protectedRoute,
} as any)

const protectedContactsRoute = protectedContactsImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => protectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__protected': {
      id: '/__protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof protectedImport
      parentRoute: typeof rootRoute
    }
    '/accueil': {
      id: '/accueil'
      path: '/accueil'
      fullPath: '/accueil'
      preLoaderRoute: typeof AccueilImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mobile-record': {
      id: '/mobile-record'
      path: '/mobile-record'
      fullPath: '/mobile-record'
      preLoaderRoute: typeof MobileRecordImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/__protected/contacts': {
      id: '/__protected/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof protectedContactsImport
      parentRoute: typeof protectedImport
    }
    '/__protected/documents': {
      id: '/__protected/documents'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof protectedDocumentsImport
      parentRoute: typeof protectedImport
    }
    '/__protected/integrations': {
      id: '/__protected/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof protectedIntegrationsImport
      parentRoute: typeof protectedImport
    }
    '/__protected/patients': {
      id: '/__protected/patients'
      path: '/patients'
      fullPath: '/patients'
      preLoaderRoute: typeof protectedPatientsImport
      parentRoute: typeof protectedImport
    }
    '/__protected/templates': {
      id: '/__protected/templates'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof protectedTemplatesImport
      parentRoute: typeof protectedImport
    }
    '/__protected/': {
      id: '/__protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexImport
      parentRoute: typeof protectedImport
    }
  }
}

// Create and export the route tree

interface protectedRouteChildren {
  protectedContactsRoute: typeof protectedContactsRoute
  protectedDocumentsRoute: typeof protectedDocumentsRoute
  protectedIntegrationsRoute: typeof protectedIntegrationsRoute
  protectedPatientsRoute: typeof protectedPatientsRoute
  protectedTemplatesRoute: typeof protectedTemplatesRoute
  protectedIndexRoute: typeof protectedIndexRoute
}

const protectedRouteChildren: protectedRouteChildren = {
  protectedContactsRoute: protectedContactsRoute,
  protectedDocumentsRoute: protectedDocumentsRoute,
  protectedIntegrationsRoute: protectedIntegrationsRoute,
  protectedPatientsRoute: protectedPatientsRoute,
  protectedTemplatesRoute: protectedTemplatesRoute,
  protectedIndexRoute: protectedIndexRoute,
}

const protectedRouteWithChildren = protectedRoute._addFileChildren(
  protectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof protectedRouteWithChildren
  '/accueil': typeof AccueilRoute
  '/login': typeof LoginRoute
  '/mobile-record': typeof MobileRecordRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/contacts': typeof protectedContactsRoute
  '/documents': typeof protectedDocumentsRoute
  '/integrations': typeof protectedIntegrationsRoute
  '/patients': typeof protectedPatientsRoute
  '/templates': typeof protectedTemplatesRoute
  '/': typeof protectedIndexRoute
}

export interface FileRoutesByTo {
  '/accueil': typeof AccueilRoute
  '/login': typeof LoginRoute
  '/mobile-record': typeof MobileRecordRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/contacts': typeof protectedContactsRoute
  '/documents': typeof protectedDocumentsRoute
  '/integrations': typeof protectedIntegrationsRoute
  '/patients': typeof protectedPatientsRoute
  '/templates': typeof protectedTemplatesRoute
  '/': typeof protectedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/__protected': typeof protectedRouteWithChildren
  '/accueil': typeof AccueilRoute
  '/login': typeof LoginRoute
  '/mobile-record': typeof MobileRecordRoute
  '/register': typeof RegisterRoute
  '/reset-password': typeof ResetPasswordRoute
  '/__protected/contacts': typeof protectedContactsRoute
  '/__protected/documents': typeof protectedDocumentsRoute
  '/__protected/integrations': typeof protectedIntegrationsRoute
  '/__protected/patients': typeof protectedPatientsRoute
  '/__protected/templates': typeof protectedTemplatesRoute
  '/__protected/': typeof protectedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/accueil'
    | '/login'
    | '/mobile-record'
    | '/register'
    | '/reset-password'
    | '/contacts'
    | '/documents'
    | '/integrations'
    | '/patients'
    | '/templates'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/accueil'
    | '/login'
    | '/mobile-record'
    | '/register'
    | '/reset-password'
    | '/contacts'
    | '/documents'
    | '/integrations'
    | '/patients'
    | '/templates'
    | '/'
  id:
    | '__root__'
    | '/__protected'
    | '/accueil'
    | '/login'
    | '/mobile-record'
    | '/register'
    | '/reset-password'
    | '/__protected/contacts'
    | '/__protected/documents'
    | '/__protected/integrations'
    | '/__protected/patients'
    | '/__protected/templates'
    | '/__protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  protectedRoute: typeof protectedRouteWithChildren
  AccueilRoute: typeof AccueilRoute
  LoginRoute: typeof LoginRoute
  MobileRecordRoute: typeof MobileRecordRoute
  RegisterRoute: typeof RegisterRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
}

const rootRouteChildren: RootRouteChildren = {
  protectedRoute: protectedRouteWithChildren,
  AccueilRoute: AccueilRoute,
  LoginRoute: LoginRoute,
  MobileRecordRoute: MobileRecordRoute,
  RegisterRoute: RegisterRoute,
  ResetPasswordRoute: ResetPasswordRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/__protected",
        "/accueil",
        "/login",
        "/mobile-record",
        "/register",
        "/reset-password"
      ]
    },
    "/__protected": {
      "filePath": "__protected.tsx",
      "children": [
        "/__protected/contacts",
        "/__protected/documents",
        "/__protected/integrations",
        "/__protected/patients",
        "/__protected/templates",
        "/__protected/"
      ]
    },
    "/accueil": {
      "filePath": "accueil.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mobile-record": {
      "filePath": "mobile-record.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/__protected/contacts": {
      "filePath": "__protected/contacts.tsx",
      "parent": "/__protected"
    },
    "/__protected/documents": {
      "filePath": "__protected/documents.tsx",
      "parent": "/__protected"
    },
    "/__protected/integrations": {
      "filePath": "__protected/integrations.tsx",
      "parent": "/__protected"
    },
    "/__protected/patients": {
      "filePath": "__protected/patients.tsx",
      "parent": "/__protected"
    },
    "/__protected/templates": {
      "filePath": "__protected/templates.tsx",
      "parent": "/__protected"
    },
    "/__protected/": {
      "filePath": "__protected/index.tsx",
      "parent": "/__protected"
    }
  }
}
ROUTE_MANIFEST_END */
